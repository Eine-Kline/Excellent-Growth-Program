close all;
clear all;
clc;
[allData, scenario, sensors] = scenarioSet();
function [allData, scenario, sensors] = scenarioSet()
%scenario - Returns sensor detections
%    allData = scenario returns sensor detections in a structure
%    with time for an internally defined scenario and sensor suite.
%
%    [allData, scenario, sensors] = scenario optionally returns
%    the drivingScenario and detection generator objects.

% Generated by MATLAB(R) 9.10 (R2021a) and Automated Driving Toolbox 3.3 (R2021a).
% Generated on: 31-Mar-2021 16:47:08

% Create the drivingScenario object and ego car
[scenario, egoVehicle] = createDrivingScenario;

% Create all the sensors
[sensors, numSensors] = createSensors(scenario);

allData = struct('Time', {}, 'ActorPoses', {}, 'ObjectDetections', {}, 'LaneDetections', {}, 'PointClouds', {}, 'INSMeasurements', {});
running = true;
while running
    
    % Generate the target poses of all actors relative to the ego vehicle
    poses = targetPoses(egoVehicle);
    time  = scenario.SimulationTime;
    
    objectDetections = {};
    laneDetections   = [];
    ptClouds = {};
    insMeas = {};
    isValidTime = false(1, numSensors);
    
    % Generate detections for each sensor
    for sensorIndex = 1:numSensors
        sensor = sensors{sensorIndex};
        % Generate the ego vehicle lane boundaries
        if isa(sensor, 'visionDetectionGenerator')
            maxLaneDetectionRange = min(500,sensor.MaxRange);
            lanes = laneBoundaries(egoVehicle, 'XDistance', linspace(-maxLaneDetectionRange, maxLaneDetectionRange, 101));
        end
        [objectDets, numObjects, isValidTime(sensorIndex)] = sensor(poses, time);
        objectDetections = [objectDetections; objectDets(1:numObjects)]; %#ok<AGROW>
    end
    
    % Aggregate all detections into a structure for later use
    if any(isValidTime)
        allData(end + 1) = struct( ...
            'Time',       scenario.SimulationTime, ...
            'ActorPoses', actorPoses(scenario), ...
            'ObjectDetections', {objectDetections}, ...
            'LaneDetections', {laneDetections}, ...
            'PointClouds',   {ptClouds}, ... %#ok<AGROW>
            'INSMeasurements',   {insMeas}); %#ok<AGROW>
    end
    
    % Advance the scenario one time step and exit the loop if the scenario is complete
    running = advance(scenario);
end

% Restart the driving scenario to return the actors to their initial positions.
restart(scenario);

% Release all the sensor objects so they can be used again.
for sensorIndex = 1:numSensors
    release(sensors{sensorIndex});
end

%%%%%%%%%%%%%%%%%%%%
% Helper functions %
%%%%%%%%%%%%%%%%%%%%

% Units used in createSensors and createDrivingScenario
% Distance/Position - meters
% Speed             - meters/second
% Angles            - degrees
% RCS Pattern       - dBsm
end
function [sensors, numSensors] = createSensors(scenario)
% createSensors Returns all sensor objects to generate detections

% Assign into each sensor the physical and radar profiles for all actors
profiles = actorProfiles(scenario);
sensors{1} = drivingRadarDataGenerator('SensorIndex', 1, ...
    'MountingLocation', [2 0 0.2], ...
    'TargetReportFormat', 'Detections', ...
    'FieldOfView', [30 5], ...
    'Profiles', profiles);
sensors{2} = drivingRadarDataGenerator('SensorIndex', 2, ...
    'MountingLocation', [-1 0 0.2], ...
    'MountingAngles', [-180 0 0], ...
    'RangeLimits', [0 100], ...
    'TargetReportFormat', 'Detections', ...
    'FieldOfView', [30 5], ...
    'Profiles', profiles);
sensors{3} = drivingRadarDataGenerator('SensorIndex', 3, ...
    'MountingLocation', [1.1 0.75 0.2], ...
    'MountingAngles', [70 0 0], ...
    'RangeLimits', [0 50], ...
    'TargetReportFormat', 'Detections', ...
    'FieldOfView', [120 5], ...
    'Profiles', profiles);
sensors{4} = drivingRadarDataGenerator('SensorIndex', 4, ...
    'MountingLocation', [0 0.75 0.2], ...
    'MountingAngles', [110 0 0], ...
    'RangeLimits', [0 50], ...
    'TargetReportFormat', 'Detections', ...
    'FieldOfView', [120 5], ...
    'Profiles', profiles);
sensors{5} = drivingRadarDataGenerator('SensorIndex', 5, ...
    'MountingLocation', [1.1 -0.75 0.2], ...
    'MountingAngles', [-70 0 0], ...
    'RangeLimits', [0 50], ...
    'TargetReportFormat', 'Detections', ...
    'FieldOfView', [120 5], ...
    'Profiles', profiles);
sensors{6} = drivingRadarDataGenerator('SensorIndex', 6, ...
    'MountingLocation', [0 -0.75 0.2], ...
    'MountingAngles', [-110 0 0], ...
    'RangeLimits', [0 50], ...
    'TargetReportFormat', 'Detections', ...
    'FieldOfView', [120 5], ...
    'Profiles', profiles);
numSensors = 6;
end
function [scenario, egoVehicle] = createDrivingScenario
% createDrivingScenario Returns the drivingScenario defined in the Designer

% Construct a drivingScenario object.
scenario = drivingScenario;

% Add all road segments
roadCenters = [8.8 23.2 0;
    45 22.8 0;
    44.1 -19.5 0;
    11.5 -24.6 0;
    -0.6 -0.6 0;
    8.8 23.2 0];
laneSpecification = lanespec(2, 'Width', 3);
road1 = road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road');

% Add the barriers
barrier(scenario, road1, 'RoadEdge', 'right', ...
    'ClassID', 5, ...
    'Width', 0.61, ...
    'Height', 0.81, ...
    'Mesh', driving.scenario.jerseyBarrierMesh, 'PlotColor', [0.65 0.65 0.65], 'Name', 'Jersey Barrier');

% Add the actors
actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [34 24.7 0], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'PlotColor', [0.85 0.325 0.098], ...
    'Name', 'Pedestrian');

% Add the ego vehicle
egoVehicle = vehicle(scenario, ...
    'ClassID', 2, ...
    'Length', 3, ...
    'Width', 1.5, ...
    'Height', 1.5, ...
    'Position', [23.5007922752983 28.7301901252032 0], ...
    'Mesh', driving.scenario.truckMesh, ...
    'PlotColor', [0.929 0.694 0.125], ...
    'Name', 'Truck');
waypoints = [23.5007922752983 28.7301901252032 0;
    25.3 28.6 0;
    29.6 28.6 0;
    34.4 27.4 0;
    39.7 24.9 0;
    44.2 21.6 0;
    48.7 16.1 0;
    51.6 9.4 0;
    52.2 4 0;
    51.7 -3.2 0;
    49.3 -10.2 0;
    44.7 -16.9 0;
    39.1 -22.1 0;
    32.5 -25.4 0;
    24 -26.8 0;
    16.2 -25.5 0;
    10.5 -22.1 0;
    6.8 -18.4 0;
    4 -13.7 0;
    1.6 -7.9 0;
    0.7 -1.3 0;
    0.8 5.1 0;
    2.4 11.3 0;
    5.2 17.1 0;
    6.2 22.4 0;
    13.9 27.7 0;
    18.6 27.5 0;
    24.6 28.9 0];
speed = [45;45;45;45;45;45;45;45;45;45;45;45;45;45;45;45;45;45;45;45;45;45;45;45;45;45;45;45];
smoothTrajectory(egoVehicle, waypoints, speed);

vehicle(scenario, ...
    'ClassID', 1, ...
    'Length', 2.5, ...
    'Width', 1.5, ...
    'Position', [10.4 22.6 0], ...
    'Yaw', 35, ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [0.494 0.184 0.556], ...
    'Name', 'Car');

car1 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Length', 2.5, ...
    'Width', 1.3, ...
    'Position', [30.1772279020496 28.7230019686909 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [0.466 0.674 0.188], ...
    'Name', 'Car1');
waypoints = [30.1772279020496 28.7230019686909 0;
    33.8 28.2 0;
    40 25 0;
    44.2 21.8 0;
    48.9 16.1 0;
    51.8 9.4 0;
    52.4 4.2 0;
    51.7 -3.2 0;
    49.3 -10.3 0;
    44.9 -17 0;
    39.1 -22.2 0;
    32.6 -25.5 0;
    24.1 -26.9 0;
    16.2 -25.4 0;
    10.2 -22.3 0;
    6.6 -18.1 0;
    3.8 -13.3 0;
    1.5 -7.6 0;
    0.4 -0.9 0;
    0.9 5.4 0;
    -0.9 8.4 0;
    0.9 14.9 0;
    3.7 19.7 0;
    7.7 24.1 0;
    13.8 28.4 0;
    21.6 31.4 0;
    29.5 31.7 0;
    37.1 29.6 0;
    37.3 29.6 0;
    44.1 25.7 0;
    50.3 19.3 0;
    50.2 13.2 0;
    52.4 4 0;
    50.7 -7 0];
speed = [50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;0;-50;-50;-50;-50;-50;-50];
trajectory(car1, waypoints, speed);
end
